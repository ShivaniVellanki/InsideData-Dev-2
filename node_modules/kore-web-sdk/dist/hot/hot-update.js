self["webpackHotUpdatekore_web_sdk"]("esm",{

/***/ "./src/components/chatwindow/config/kore-config.ts":
/*!*********************************************************!*\
  !*** ./src/components/chatwindow/config/kore-config.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _sass_brandingJSON__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/brandingJSON */ "./src/components/chatwindow/sass/brandingJSON.ts");
// var KoreSDK = KoreSDK || {};
 // To do
var chatConfig = {};
var botOptions = {};
botOptions.openSocket = true;
botOptions.logLevel = 'debug';
botOptions.koreAPIUrl = "https://platform.kore.ai/api/";
botOptions.API_KEY_CONFIG = {
    bootstrapURL: 'https://platform.kore.ai/api/platform/websdk',
    KEY: 'YOUR_API_KEY'
},
    botOptions.enableAck = {
        delivery: false
    };
botOptions.koreSpeechAPIUrl = ""; //deprecated
//botOptions.bearer = "bearer xyz-------------------";
//botOptions.ttsSocketUrl = '';//deprecated
//botOptions.koreAnonymousFn = koreAnonymousFn;
botOptions.JWTUrl = "PLEASE_ENTER_JWTURL_HERE";
botOptions.userIdentity = 'PLEASE_ENTER_USER_EMAIL_ID'; // Provide users email id here
botOptions.botInfo = { name: "PLEASE_ENTER_BOT_NAME", "_id": "PLEASE_ENTER_BOT_ID" }; // bot name is case sensitive
botOptions.clientId = "PLEASE_ENTER_CLIENT_ID";
botOptions.clientSecret = "PLEASE_ENTER_CLIENT_SECRET";
//for webhook based communication use following option 
botOptions.webhookConfig = {
    enable: false,
    webhookURL: 'PLEASE_PROVIDE_WEBHOOK_URL',
    useSDKChannelResponses: false,
    apiVersion: 2
};
// Note: Polling must be enabled for webhook version 2. Please refer https://docs.kore.ai/xo/channels/add-webhook-channel/#step-1-associate-an-app on how to enable polling.
// To add query parameters for the websocket url, add the query parameters in queryParams object
botOptions.webSocketConfig = {
    socketUrl: {
        queryParams: {}
    }
};
// To modify the web socket url use the following option
// botOptions.reWriteSocketURL = {
//     protocol: 'PROTOCOL_TO_BE_REWRITTEN',
//     hostname: 'HOSTNAME_TO_BE_REWRITTEN',
//     port: 'PORT_TO_BE_REWRITTEN'
// };
chatConfig = {
    mockMode: {
        enable: false
    },
    pwcConfig: {
        enable: true,
        container: 'body',
        knownUser: false
    },
    botOptions: botOptions,
    container: 'body',
    allowIframe: false,
    isSendButton: false,
    allowLocation: false,
    loadHistory: true,
    messageHistoryLimit: 10,
    googleMapsAPIKey: "",
    minimizeMode: true,
    multiPageApp: {
        enable: false,
        userIdentityStore: 'localStorage',
        chatWindowStateStore: 'localStorage' //'localStorage || sessionStorage'
    },
    supportDelayedMessages: true,
    pingPong: {
        interval: 30000 //In milli sec, To keep the websocket alive skd send ping message in this interval      
    },
    enableThemes: true,
    branding: _sass_brandingJSON__WEBPACK_IMPORTED_MODULE_0__["default"],
    location: {
        enable: false,
        googleMapsAPIKey: '' // provide Google maps API key to get location details
    },
    history: {
        enable: true,
        recent: {
            batchSize: 10, // set limit to load the number of messages in recent chat history
        },
        paginatedScroll: {
            enable: true,
            batchSize: 10,
            loadingLabel: 'Loading old messages' // Loading label will be displayed when the user uses paginated scroll
        }
    },
    sendFailedMessage: {
        MAX_RETRIES: 3
    },
    maxReconnectionAPIAttempts: 5,
    UI: {
        version: "v3"
    },
    UIContext: {},
    syncMessages: {
        onReconnect: {
            enable: false,
            batchSize: 10 // To configure the number of messages to fetch
        },
        onNetworkResume: {
            enable: true,
            batchSize: 10 // To configure the number of messages to fetch
        }
    },
    enableEmojiShortcut: true
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (chatConfig);


/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("45a563bd6de1a0d08484")
/******/ })();
/******/ 
/******/ }
)
//# sourceMappingURL=hot-update.js.map